//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MMaster.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "16.2.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("// MMASTER COMMAND FILE TEMPLATE\r\n// MMaster (c) 2017-2019 Matthieu Badoy. All ri" +
            "ghts reserved.\r\n// ----------------------------------------------------------\r\n\r" +
            "\n// REF \"System.Windows.Forms.dll\"\r\n// Reference other assemblies with REF comme" +
            "nts as above\r\n\r\nusing MMaster; // Must be implemented\r\nusing System;\r\nusing Syst" +
            "em.Windows.Forms;\r\n\r\nnamespace MyNamespace\r\n{                \r\n\tpublic static cl" +
            "ass CommandClass\r\n\t{\t\t\r\n\t\t[MMasterCommand(\"Shows a message box.\")] // MMaster co" +
            "mmand declaration attribute: [MMasterCommand([string help = \"\"],[bool requiresAd" +
            "minRights = false])]\r\n\t\tpublic static void CommandName(string message = null) //" +
            " Call this command with \'CommandClass.CommandName\'\r\n\t\t{\r\n\t\t\t// Edit code here\r\n\t" +
            "\t\tApplication.EnableVisualStyles();\r\n\t\t\t\r\n\t\t\tif (message == null)\r\n\t\t\t{\r\n\t\t\t\tmes" +
            "sage = CInput.ReadFromConsole(\"Message to print: \").ToString();\r\n\t\t\t}\r\n\r\n\t\t\tMess" +
            "ageBox.Show(message);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/// <information>\r\n/// MMASTER AVAILABLE ME" +
            "THODS:\r\n///\r\n///- static object CInput.ReadFromConsole(string promptMessage = \"\"" +
            ", ConsoleInputType inputType = ConsoleInputType.String, bool canEscape = false, " +
            "int maxChars = -1, char charMask = Char.MinValue)\r\n///\t\tReturns a user input as " +
            "an object (return = string (by default)/int/double).\r\n///\t\tpromptMessage (option" +
            "al): prompt to show before user input.\r\n///\t\tinputType (optional): type of the i" +
            "nput (inputType = ConsoleInputType.String/ConsoleInputType.Int/ConsoleInputType." +
            "Double).\r\n///\t\tcanEscape (optional): if true and if the users presses ESCAPE, it" +
            " escapes the Read and returns null.\r\n///\t\tmaxChars (optional): number of maximum" +
            " chars (if maxChars < 1, this parameter is ignored).\r\n///\t\tcharMask (optional): " +
            "replace characters with a specific char.\r\n///\r\n///- static ConsoleAnswer CInput." +
            "UserChoice(ConsoleAnswerType type)\r\n///\t\tReturns a user choice among options (re" +
            "turn = ConsoleAnswer.Yes/ConsoleAnswer.No/ConsoleAnswer.Cancel/ConsoleAnswer.Tru" +
            "e/ConsoleAnswer.False).\r\n///\t\ttype: type of options (type = ConsoleAnswerType.Ye" +
            "sNo/ConsoleAnswerType.YesNoCancel/ConsoleAnswerType.TrueFalse)\r\n///\r\n///- static" +
            " int UserPickInt(int maxNumber)\r\n///\t\tReturns a picked number between 0 and maxN" +
            "umber.\r\n///\t\tmaxNumber: maximum number available for choice.\r\n///\r\n///- static s" +
            "tring CFormat.Indent(int nb)\r\n///\t\tReturns a string of white spaces (nb * white " +
            "space).\r\n///\r\n///- static void CFormat.JumpLine()\r\n///\t\tSimply jumps a line.\r\n//" +
            "/\r\n///- static void WriteLine(string text, ConsoleColor color = ConsoleColor.Gra" +
            "y)\r\n///\t\tWrites a line. It can be colored.\r\n///\t\ttext: message to print.\r\n///\t\tc" +
            "olor (optional): color of the line.\r\n///\r\n///- static void Write(string text, Co" +
            "nsoleColor color = ConsoleColor.Gray)\r\n///\t\tWrites text. It can be colored.\r\n///" +
            "\t\ttext: message to print.\r\n///\t\tcolor (optional): color of the line.\r\n///\r\n///- " +
            "static void DrawProgressBar(double complete, double maxVal, int barSize, char pr" +
            "ogressCharacter, ConsoleColor primaryColor = ConsoleColor.Green,\r\n///          C" +
            "onsoleColor secondaryColor = ConsoleColor.DarkGreen)\r\n///\t\tDraws a progress bar." +
            "\r\n///\t\tcomplete: value of the progression.\r\n///\t\tmaxVal: max value of the progre" +
            "ssion.\r\n///\t\tbarSize: size of the progress bar in number of chars.\r\n///\t\tprogres" +
            "sCharacter: char to draw the progress bar with (recommanded: ■).\r\n///\t\tprimaryCo" +
            "lor (optional): foreground color of the progress bar.\r\n///\t\tsecondaryColor (opti" +
            "onal): background color of the progress bar.\r\n/// </information>")]
        public string FileTemplate {
            get {
                return ((string)(this["FileTemplate"]));
            }
            set {
                this["FileTemplate"] = value;
            }
        }
    }
}
