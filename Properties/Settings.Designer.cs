//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MMaster.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "16.2.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("// MMASTER COMMAND FILE TEMPLATE\r\n// MMaster (c) 2017-2019 Matthieu Badoy. All ri" +
            "ghts reserved.\r\n// ----------------------------------------------------------\r\n\r" +
            "\n// REF \"System.Windows.Forms.dll\"\r\n// Reference other assemblies with REF comme" +
            "nts as above\r\n\r\nusing MMaster; // /!\\ MUST BE IMPLEMENTED! /!\\\r\nusing System;\r\n\r" +
            "\nnamespace MyNamespace\r\n{\r\n    // Mandatory library attribute vvv\r\n    [MMasterL" +
            "ibrary(\"This is the help prompt of this library.\", \"Library\")] // ARGS : HelpPro" +
            "mpt, CallName. Both of these args are optional.\r\n    class Library\r\n    {\r\n     " +
            "   // Mandatory command attribute vvv\r\n        [MMasterCommand(\"Prints Hello!\", " +
            "\"Command\")] // ARGS : HelpPrompt, CallName. Both of these args are optional.\r\n  " +
            "      static void Command(string message) // Call this command with \'Library.Com" +
            "mand\'\r\n        {\r\n            // Edit code here\r\n            CFormat.WriteLine(\"" +
            "Hello \" + message + \"!\", ConsoleColor.Blue);\r\n        }\r\n    }\r\n}\r\n\r\n/// <inform" +
            "ation>\r\n/// MMASTER AVAILABLE STATIC METHODS:\r\n///\r\n///- object CInput.ReadFromC" +
            "onsole(string promptMessage = \"\", ConsoleInputType inputType = ConsoleInputType." +
            "String, bool canEscape = false, int maxChars = -1, char charMask = Char.MinValue" +
            ")\r\n///\t\tReturns a user input as an object (return = string (by default)/int/doub" +
            "le).\r\n///\t\tpromptMessage (optional): prompt to show before user input.\r\n///\t\tinp" +
            "utType (optional): type of the input (inputType = ConsoleInputType.String/Consol" +
            "eInputType.Int/ConsoleInputType.Double).\r\n///\t\tcanEscape (optional): if true and" +
            " if the users presses ESCAPE, it escapes the Read and returns null.\r\n///\t\tmaxCha" +
            "rs (optional): number of maximum chars (if maxChars < 1, this parameter is ignor" +
            "ed).\r\n///\t\tcharMask (optional): replace characters with a specific char.\r\n///\r\n/" +
            "//- ConsoleAnswer CInput.UserChoice(ConsoleAnswerType type)\r\n///\t\tReturns a user" +
            " choice among options (return = ConsoleAnswer.Yes/ConsoleAnswer.No/ConsoleAnswer" +
            ".Cancel/ConsoleAnswer.True/ConsoleAnswer.False).\r\n///\t\ttype: type of options (ty" +
            "pe = ConsoleAnswerType.YesNo/ConsoleAnswerType.YesNoCancel/ConsoleAnswerType.Tru" +
            "eFalse)\r\n///\r\n///- int CInput.UserPickInt(int maxNumber)\r\n///\t\tReturns a picked " +
            "number between 0 and maxNumber.\r\n///\t\tmaxNumber: maximum number available for ch" +
            "oice.\r\n///\r\n///- string CFormat.Indent(int nb)\r\n///\t\tReturns a string of white s" +
            "paces (nb * white space).\r\n///\r\n///- void CFormat.JumpLine()\r\n///\t\tSimply jumps " +
            "a line.\r\n///\r\n///- void CFormat.WriteLine(string text, ConsoleColor color = Cons" +
            "oleColor.Gray)\r\n///\t\tWrites a line. It can be colored.\r\n///\t\ttext: message to pr" +
            "int.\r\n///\t\tcolor (optional): color of the line.\r\n///\t\t\r\n/// - void CFormat.Write" +
            "Line(ConsoleColor color, params string[] text)\r\n///\t\tWrites as many colored line" +
            "s as you want.\r\n///\t\ttext: message to print (infinite argument, ad as many lines" +
            " as you want).\r\n///\t\tcolor (optional): color of the line.\r\n///\r\n///- static void" +
            " CFormat.Write(string text, ConsoleColor color = ConsoleColor.Gray)\r\n///\t\tWrites" +
            " text. It can be colored.\r\n///\t\ttext: message to print.\r\n///\t\tcolor (optional): " +
            "color of the line.\r\n///\r\n///- static void CFormat.DrawProgressBar(double complet" +
            "e, double maxVal, int barSize, char progressCharacter, ConsoleColor primaryColor" +
            " = ConsoleColor.Green,\r\n///          ConsoleColor secondaryColor = ConsoleColor." +
            "DarkGreen)\r\n///\t\tDraws a progress bar.\r\n///\t\tcomplete: value of the progression." +
            "\r\n///\t\tmaxVal: max value of the progression.\r\n///\t\tbarSize: size of the progress" +
            " bar in number of chars.\r\n///\t\tprogressCharacter: char to draw the progress bar " +
            "with (recommanded: ■).\r\n///\t\tprimaryColor (optional): foreground color of the pr" +
            "ogress bar.\r\n///\t\tsecondaryColor (optional): background color of the progress ba" +
            "r.\r\n/// </information>\r\n")]
        public string FileTemplate {
            get {
                return ((string)(this["FileTemplate"]));
            }
            set {
                this["FileTemplate"] = value;
            }
        }
    }
}
